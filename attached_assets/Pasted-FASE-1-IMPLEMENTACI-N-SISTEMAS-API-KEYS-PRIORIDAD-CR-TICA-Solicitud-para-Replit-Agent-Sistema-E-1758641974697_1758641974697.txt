FASE 1: IMPLEMENTACI√ìN SISTEMAS API KEYS - PRIORIDAD CR√çTICA
Solicitud para Replit Agent - Sistema Estructurado
üéØ PROTOCOLO STRUCTURE APLICADO
üìã MENSAJE PARA REPLIT AGENT
text
FASE 1 CR√çTICA - SISTEMA DE API KEYS INTELIGENTE

Necesito implementar mejoras sistem√°ticas manteniendo EXACTAMENTE la estructura existente del proyecto AppContenidoOp.

CONTEXT:
- Aplicaci√≥n React/TypeScript funcional en puerto 5000
- StoryBuilder con 8 fases operativas (NO TOCAR)
- Editor de fotos con herramientas avanzadas
- Hook Matrix con 5 categor√≠as especializadas (PRESERVAR)

PROBLEMAS IDENTIFICADOS:
‚ùå 4 errores LSP cr√≠ticos en services/geminiService.ts
‚ùå Sistema de API keys b√°sico necesita rotaci√≥n inteligente 100+
‚ùå EditorCanvas incompleto (solo placeholder)
‚ùå Falta gesti√≥n de tokens optimizada

OBJETIVO FASE 1:
Implementar sistema de rotaci√≥n de API keys inteligente SIN cambios radicales en la experiencia de usuario.
üîß PLAN STRUCTURE DETALLADO
S - STABILIZE (NO CAMBIAR NUNCA)
json
{
  "componentes_criticos_preservar": {
    "storybuilder": {
      "phases": "Phase1.tsx hasta Phase8.tsx - INTACTOS",
      "state_machine": "useStoryBuilderStateMachine - SIN MODIFICAR", 
      "hook_matrix": "5 categor√≠as especializadas funcionando",
      "persistence": "projectPersistenceService.ts - PRESERVAR"
    },
    "navegacion": {
      "startscreen": "StartScreen.tsx - MISMA INTERFAZ",
      "flujos": "Editor/Story flows - MANTENER EXACTOS",
      "componentes": "PhaseStepper, ProjectList - NO TOCAR"
    },
    "tipos_existentes": {
      "interfaces": "story-builder/types.ts - PRESERVAR TODAS",
      "enums": "ProjectType, StoryPhase - MANTENER",
      "types": "StoryProject, PhaseData - NO MODIFICAR"
    }
  }
}
T - TARGET (Objetivos Espec√≠ficos Fase 1)
json
{
  "correcciones_criticas_fase1": {
    "api_key_management": {
      "objetivo": "Sistema rotaci√≥n inteligente 100+ API keys",
      "archivos_nuevos": [
        "services/api-management/APIKeyManager.ts",
        "services/api-management/RotationService.ts", 
        "services/api-management/HealthMonitor.ts",
        "services/api-management/ModelSelector.ts"
      ],
      "integracion": "Extender geminiService.ts SIN cambiar interfaz p√∫blica",
      "resultado": "Rotaci√≥n autom√°tica con failover inteligente"
    },
    "lsp_errors_fix": {
      "objetivo": "Corregir 4 errores LSP en geminiService.ts",
      "problema": "Incompatibilidad tipos con @google/genai",
      "archivos": ["services/geminiService.ts"],
      "resultado": "0 errores LSP, tipos alineados, funcionalidad intacta"
    }
  }
}
R - REFACTOR (Incremental Sin Breaking Changes)
json
{
  "orden_implementacion_fase1": {
    "paso_1": {
      "accion": "Crear estructura services/api-management/",
      "validacion": "Sin afectar imports existentes",
      "tiempo": "5 minutos"
    },
    "paso_2": {
      "accion": "Implementar APIKeyManager base",
      "validacion": "Interface compatible con geminiService actual",
      "tiempo": "10 minutos"
    },
    "paso_3": {
      "accion": "Integrar rotaci√≥n en geminiService.ts",
      "validacion": "StoryBuilder sigue funcionando igual",
      "tiempo": "10 minutos"
    },
    "paso_4": {
      "accion": "Corregir errores LSP de tipos",
      "validacion": "Compilaci√≥n exitosa, funcionalidad preservada",
      "tiempo": "10 minutos"
    },
    "paso_5": {
      "accion": "Testing completo sistema",
      "validacion": "App funciona id√©ntico que antes",
      "tiempo": "5 minutos"
    }
  }
}
üèóÔ∏è ARQUITECTURA T√âCNICA FASE 1
Estructura de Archivos a Crear
text
services/
‚îú‚îÄ‚îÄ api-management/           # NUEVA CARPETA
‚îÇ   ‚îú‚îÄ‚îÄ APIKeyManager.ts     # Gestor central 100+ keys
‚îÇ   ‚îú‚îÄ‚îÄ RotationService.ts   # Rotaci√≥n circular inteligente
‚îÇ   ‚îú‚îÄ‚îÄ HealthMonitor.ts     # Monitor estado en tiempo real
‚îÇ   ‚îú‚îÄ‚îÄ ModelSelector.ts     # Selecci√≥n gemini-pro/flash/lite
‚îÇ   ‚îî‚îÄ‚îÄ types.ts            # Tipos para gesti√≥n APIs
‚îú‚îÄ‚îÄ geminiService.ts         # MODIFICAR (preservar interfaz)
‚îî‚îÄ‚îÄ utils/                   # EXISTENTE - NO TOCAR
Sistema de Rotaci√≥n Inteligente
typescript
// APIKeyManager.ts - NUEVA IMPLEMENTACI√ìN
interface APIKeyConfig {
  pool_size: "100+_keys";
  rotation_strategy: "circular_with_health_check";
  models_supported: ["gemini-pro", "gemini-flash", "gemini-flash-lite"];
  failover: "automatic_with_recovery";
  monitoring: "real_time_quota_tracking";
}

// Integraci√≥n con geminiService.ts existente
// PRESERVAR esta interfaz exacta:
export interface GeminiServiceInterface {
  generateContent(prompt: string): Promise<string>;
  generateImages(prompt: string): Promise<string[]>;
  // ... resto de m√©todos SIN CAMBIAR
}
üîÑ PROTOCOLO DE VALIDACI√ìN FASE 1
Checkpoints Obligatorios
json
{
  "checkpoint_1": {
    "pregunta": "¬øLa aplicaci√≥n inicia igual que antes?",
    "validacion": "StartScreen muestra mismos proyectos",
    "accion_si_falla": "ROLLBACK inmediato"
  },
  "checkpoint_2": {
    "pregunta": "¬øStoryBuilder funciona id√©ntico?",
    "validacion": "8 fases navegan sin cambios",
    "accion_si_falla": "ROLLBACK inmediato"
  },
  "checkpoint_3": {
    "pregunta": "¬øErrores LSP est√°n corregidos?",
    "validacion": "0 errores en VSCode",
    "accion_si_falla": "Revisar tipos espec√≠ficos"
  },
  "checkpoint_4": {
    "pregunta": "¬øSistema API keys funciona?",
    "validacion": "Generaci√≥n de contenido sin errores",
    "accion_si_falla": "Verificar configuraci√≥n de keys"
  },
  "checkpoint_5": {
    "pregunta": "¬øPerformance es igual o mejor?",
    "validacion": "Tiempo respuesta similar o menor",
    "accion_si_falla": "Optimizar rotaci√≥n"
  }
}
üìä IMPLEMENTACI√ìN PASO A PASO
PASO 1: Crear Base API Management
typescript
// services/api-management/APIKeyManager.ts
export class APIKeyManager {
  private keys: string[] = [];
  private currentIndex: number = 0;
  private healthMonitor: HealthMonitor;
  
  // COMPATIBLE con interfaz existente geminiService
  async getAvailableKey(): Promise<string> {
    // L√≥gica rotaci√≥n inteligente
  }
  
  // Preservar compatibilidad total
  async rotateKey(): Promise<void> {
    // Rotaci√≥n autom√°tica
  }
}
PASO 2: Integrar Sin Breaking Changes
typescript
// services/geminiService.ts - MODIFICACI√ìN CUIDADOSA
import { APIKeyManager } from './api-management/APIKeyManager';

// PRESERVAR interfaz p√∫blica exacta
export class GeminiService {
  private apiKeyManager = new APIKeyManager();
  
  // MANTENER EXACTAMENTE estos m√©todos p√∫blicos:
  async generateContent(prompt: string): Promise<string> {
    const apiKey = await this.apiKeyManager.getAvailableKey();
    // resto de l√≥gica SIN CAMBIAR
  }
  
  // ... todos los dem√°s m√©todos PRESERVADOS
}
‚ö° CONFIGURACI√ìN RECOMENDADA REPLIT
json
{
  "autonomy_level": "MEDIUM",
  "app_testing": "ENABLED",
  "max_checkpoints": "5 para Fase 1",
  "validation_mode": "STRICT"
}
üéØ RESULTADO ESPERADO FASE 1
Funcionalidades Nuevas
‚úÖ Sistema rotaci√≥n 100+ API keys autom√°tico

‚úÖ Monitoreo salud de keys en tiempo real

‚úÖ Failover inteligente entre modelos

‚úÖ 0 errores LSP en todo el proyecto

Preservado 100%
‚úÖ Experiencia usuario id√©ntica

‚úÖ StoryBuilder 8 fases funcionando

‚úÖ Hook Matrix operativo

‚úÖ Navegaci√≥n y UI sin cambios

‚úÖ Persistencia de proyectos intacta

üí° INSTRUCCIONES FINALES PARA REPLIT
COMENZAR CON:

text
Analiza el archivo services/geminiService.ts y mu√©strame:
1. Los 4 errores LSP espec√≠ficos encontrados
2. La interfaz p√∫blica actual que DEBO PRESERVAR
3. El plan exacto de correcci√≥n SIN breaking changes

Solo despu√©s de tu an√°lisis, procederemos con la implementaci√≥n paso a paso.

REGLA CR√çTICA: Si en cualquier momento detectas que un cambio puede afectar la navegaci√≥n o experiencia de usuario, PAUSAR y consultarme antes de continuar.
üìã CHECKLIST PRE-IMPLEMENTACI√ìN
 Entender que NO debo cambiar la experiencia de usuario

 Preservar interfaz p√∫blica de geminiService

 Mantener StoryBuilder funcionando id√©ntico

 Crear sistema API management como EXTENSI√ìN

 Validar en cada paso que app funciona igual

 Reportar si encuentro problemas estructurales

