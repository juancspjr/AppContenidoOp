/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/

// Data collected from the user through the story builder wizard
export interface StoryData {
  concept: string;
  format: string;
  narrativeStyles: string[];
  energyLevel: number;
  visualStyles: string[];
  storyPDF: File | null;
  contextImages: File[];
  characters: CharacterData[];
  narrativeStructure: string[];
  hook: string[];
  conflict: string[];
  ending: string[];
}

// Represents a single character
export interface CharacterData {
  id: string;
  name:string;
  description: string;
  image: File | null;
  imagePreviewUrl?: string;
}

// The main JSON object that defines the entire story plan
export interface StoryMasterplan {
  metadata: {
    title: string;
    logline: string;
    format: string;
    style_and_energy: {
      narrative_styles: string[];
      visual_styles: string[];
      energy_level: number;
    };
  };
  characters: {
    name: string;
    description: string;
    visual_prompt: string; // AI-generated prompt for image/video generation
    imageAnalysis?: ImageAnalysis;
  }[];
  story_structure: {
    hook: string;
    conflict: string;
    ending: string;
    narrative_arc: {
      act: number;
      name: string;
      scenes: Scene[];
    }[];
  };
}

export interface Scene {
  scene_number: number;
  title: string;
  summary: string;
  visual_description: string;
  dialogue_or_narration: string;
  sound_design: string;
  duration_seconds: number;
  camera_shot_type?: string;
}

// Represents the documentation generated by AI
export interface Documentation {
  aiProductionGuide: string;
  directorsBible: string;
  visualStyleGuide: string;
}

// NEW: Represents the structured analysis of a reference image based on ImageAnalysisSchema
export interface ImageAnalysis {
  features: {
    faces: { identity: string; expression: string; pose: string; }[];
    colors: { dominant: string[]; palette: string; };
    style: string;
    lighting: string;
    composition: string;
    consistencyScore: number;
    matchesReference: boolean;
    differencesFromReference: string[];
  };
  overallDescription: string;
  visualDNA: string; // A string for reuse in prompts
  tags: string[];
}

// NEW: Replaced the old Critique interface with a more structured one based on TextAnalysisSchema
export interface Critique {
  narrativeStrengths: string[];
  weaknesses: { point: string; suggestion: string; }[];
  viralPotential: number; // Score out of 10
  improvementStrategies: { title: string; description: string; }[];
  enrichedElements: {
    characters: { name: string; enhancements: string[]; }[];
    actions: { type: string; enhancements: string[]; }[];
    environments: { name: string; enhancements: string[]; }[];
    narratives: { beat: string; enhancements: string[]; }[];
    visuals: { element: string; enhancements: string[]; }[];
    technicals: { spec: string; enhancements: string[]; }[];
  };
}


// --- Nuevas Interfaces para la Arquitectura de Agentes Optimizada ---

export interface VisualConsistencySchema {
    globalStyle: {
        cinematography: string;
        colorPalette: string[];
        lightingStyle: string;
        visualMood: string;
    };
    characterModels: {
        [characterName: string]: {
            baseAppearance: string;
            keyFeatures: string[];
            clothingStyle: string;
            consistencyPrompt: string;
        };
    };
    environmentalElements: {
        timeOfDay: string;
        weather: string;
        location: string;
        props: string[];
    };
}

export interface CharacterPromptStructure {
    subjectDescription: string;
    physicalAttributes: {
        face: string;
        body: string;
        clothing: string;
        accessories: string[];
    };
    pose: string;
    expression: string;
    lightingInstructions: string;
    cameraAngle: string;
    backgroundElements: string;
    styleModifiers: string[];
    qualityTags: string[];
    negativePrompts: string[];
}

export interface SceneCompositionStructure {
    sceneSetup: {
        location: string;
        timeOfDay: string;
        weather: string;
        mood: string;
    };
    characters: {
        [characterName: string]: {
            position: string;
            pose: string;
            expression: string;
            interaction: string;
        };
    };
    cinematography: {
        cameraAngle: string;
        shotType: string;
        focusPoint: string;
        depthOfField: string;
    };
    lighting: {
        primaryLight: string;
        mood: string;
        shadows: string;
        colorTemperature: string;
    };
    composition: {
        foregroundElements: string[];
        midgroundElements: string[];
        backgroundElements: string[];
    };
    styleInstructions: {
        visualStyle: string;
        colorGrading: string;
        atmosphere: string;
    };
    technicalSpecs: {
        qualityTags: string[];
        negativePrompts: string[];
    };
}

// Represents a single generated visual reference asset
export interface ReferenceAsset {
    id: string;
    name: string;
    type: 'character' | 'environment' | 'element' | 'scene_frame';
    prompt: string;
    aspectRatio: '9:16' | '16:9' | '1:1' | '4:5';
    source: 'generated' | 'user' | 'hybrid' | 'generated_neural' | 'generated_hybrid_neural' | 'generated_hybrid_ultra' | 'generated_hybrid_high' | 'generated_hybrid_optimized';
    instruction?: string;
    sceneNumber?: number;
    frameType?: 'start' | 'climax' | 'end';
    metadata?: {
        // Old neural frame structure
        promptStructure?: CharacterPromptStructure;
        sceneComposition?: SceneCompositionStructure;
        consistencyGuide?: any;
        charactersInScene?: string[];
        neural_analysis?: any;
        cinematic_blueprint?: any;
        hyper_prompt_data?: any;
        validation_score?: number;
        viral_elements?: string[];
        consistency_maintained?: boolean;
        generation_method?: string;

        // New hybrid neural frame structure
        visual_dna_used?: boolean;
        ultra_blueprint?: any;
        validation_scores?: {
            quality: number;
            viral_potential: number;
            consistency: number;
            specificity: number;
        };
        detailed_scores?: any;
        improvements_applied?: string[];
        consistency_anchors?: string[];
        prompt_sections?: any;

        // Híbrido Ultrainteligente
        importance?: number;
        tier?: 'maximum' | 'high' | 'optimized' | 'skip';
        quota_cost?: number;
        quality_target?: number;
        anti_loop_protected?: boolean;
    };
    imageAnalysis?: ImageAnalysis;
}

// Represents the complete set of generated visual references
export interface GeneratedReferenceAssets {
  characters: ReferenceAsset[];
  environments: ReferenceAsset[];
  elements: ReferenceAsset[];
  sceneFrames: ReferenceAsset[];
}

// Represents the final generated media assets
export interface FinalAssets {
  imageAssets: { sceneId: string; assetId: string; prompt: string }[];
  videoAssets: { sceneId: string; segment: number; assetId: string; prompt: string }[];
  audioAssets: { sceneId: string; assetId: string; script: string }[];
}

// Progress update object for asset generation
export interface ProgressUpdate {
  stage: 'sub_prompts' | 'videos' | 'frame_extraction' | 'stitching' | 'complete';
  status: 'in_progress' | 'complete' | 'error';
  message: string;
  progress?: number; // e.g., 0-100
  sceneId?: string; // For scene-specific updates
  segment?: number; // For segment-specific updates
  totalSegments?: number; // For segment-specific updates
}

// Represents an AI-generated recommendation for filters/adjustments
export interface AIRecommendation {
  presetName: string;
  reason: string;
  colorBalance?: { r: number; g: number; b: number };
}

// --- Project Export/Import Types ---

export type ExportedReferenceAsset = Omit<ReferenceAsset, 'url'> & {
    imageData?: string; // base64 data URL, now optional for local storage
};

export interface ExportedGeneratedReferenceAssets {
    characters: ExportedReferenceAsset[];
    environments: ExportedReferenceAsset[];
    elements: ExportedReferenceAsset[];
    sceneFrames: ExportedReferenceAsset[];
}

export interface ExportedProject {
    plan: StoryMasterplan;
    documentation: Documentation;
    critique: Critique;
    assets: ExportedGeneratedReferenceAssets;
}

// --- Híbrido Ultrainteligente Types ---
export interface ClassifiedScene {
    scene: Scene;
    importance: number;
    tier: 'maximum' | 'high' | 'optimized' | 'skip';
    framesNeeded: number;
    estimatedQuotaCost: number;
}

export interface HybridExecutionPlan {
    characters: {
        items: any[];
        method: string;
        quota_cost: number;
    };
    tier1_maximum: {
        scenes: ClassifiedScene[];
        method: string;
        quota_cost: number;
    };
    tier2_high: {
        scenes: ClassifiedScene[];
        method: string;
        quota_cost: number;
    };
    tier3_optimized: {
        scenes: ClassifiedScene[];
        method: string;
        quota_cost: number;
    };
    tier4_skipped: {
        scenes: ClassifiedScene[];
        reason: string;
    };
    total_quota_cost: number;
}

export interface QuotaBreakdown {
    characters: number;
    tier1_scenes: number;
    tier2_scenes: number;
    tier3_scenes: number;
    total_used: number;
    remaining: number;
    efficiency_score: number;
    daily_limit: number;
    safety_buffer: number;
}

export interface GenerationStrategy {
    phase1_characters: {
        description: string;
        method: string;
        estimated_time: string;
        quota_usage: number;
        quality_level: number;
    };
    phase2_key_scenes: {
        description: string;
        method: string;
        estimated_time: string;
        quota_usage: number;
        quality_level: number;
    };
    phase3_secondary_scenes: {
        description: string;
        method: string;
        estimated_time: string;
        quota_usage: number;
        quality_level: number;
    };
    total_estimated_time: string;
    expected_quality_average: number;
    quota_efficiency: number;
}