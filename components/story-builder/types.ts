/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/

// For AdjustmentPanel AI Recommendations
export interface AIRecommendation {
    presetName: string;
    reason: string;
    confidence: number;
    colorBalance?: { r: number; g: number; b: number; };
}

// =================================================================
// STORY BUILDER CORE TYPES
// =================================================================

// Phase 1: Initial user input
export interface InitialConcept {
    idea: string;
    targetAudience?: string;
    keyElements?: string[];
}

// Phase 2: User input
export interface StyleAndFormat {
    outputFormat?: string;
    narrativeStyle?: string;
    visualStyle?: string;
    narrativeStructure?: string;
    hook?: string;
    conflict?: string;
    ending?: string;
}

// Phase 3: User input
export interface CharacterDefinition {
    name: string;
    description: string;
    archetype?: string;
    imageUrl?: string;
    imageFile?: File;
}

// Phase 4: User input
export interface StoryStructure {
    act1_summary?: string;
    act2_summary?: string;
    act3_summary?: string;
}

// The comprehensive plan generated by the AI after phase 4
export interface StoryMasterplan {
    metadata: {
        title: string;
        logline: string;
        theme: string;
        version: string;
        generatedAt: string;
    };
    creative_brief: {
        concept: string;
        target_audience: string;
        output_format: string;
        narrative_style: string;
        visual_style: string;
    };
    characters: Array<{
        name: string;
        description: string;
        visual_description: string;
        role: string;
        reference_asset_id?: string; 
    }>;
    story_structure: {
        hook: {
            type: string;
            description: string;
        };
        narrative_arc: Array<{
            act_number: number;
            title: string;
            summary: string;
            scenes: Array<{
                scene_number: number;
                title: string;
                setting: string;
                summary: string;
                emotional_beat: string;
                characters_present: string[];
                visual_elements_prompt?: string;
            }>;
        }>;
        conflict: {
            type: string;
            description: string;
        };
        ending: {
            type: string;
            description: string;
        };
    };
    critique?: Critique;
    documentation?: Documentation;
}

// Phase 6.1: The AI's evaluation of the masterplan
export interface Critique {
    overallAssessment: string;
    viralPotential: number; // Score from 1-10
    narrativeStrengths: string[];
    weaknesses: Array<{
        point: string;
        suggestion: string;
    }>;
    improvementStrategies: Array<{
        title: string,
        description: string,
    }>;
    enrichedElements?: {
        characters?: any[];
        actions?: any[];
        environments?: any[];
        narratives?: any[];
        visuals?: any[];
        technicals?: any[];
    }
}

// Phase 6.2: Generated documentation
export interface Documentation {
    directorsBible: string;
    aiProductionGuide: string;
    visualStyleGuide: string;
}

// Phase 6.3: Generated reference assets
export interface ReferenceAsset {
    id: string; // e.g., "character_john_doe"
    type: 'character' | 'environment' | 'element';
    name: string;
    description: string;
    visualPrompt: string;
    assetId: string; // ID for retrieving blob from cache
    generationStatus?: 'pending' | 'generating' | 'completed' | 'failed';
}
export interface ReferenceAssets {
    characters: ReferenceAsset[];
    environments: ReferenceAsset[];
    elements: ReferenceAsset[];
}

// Phase 6.4: Generated final video assets
export interface VideoAsset {
    sceneId: string; // "scene_1", "scene_2", etc.
    segment: number;
    totalSegments: number;
    assetId: string; // ID for retrieving blob from cache
}

export interface FinalAssets {
    videoAssets: VideoAsset[];
}

// For progress updates during long generation tasks
export interface ProgressUpdate {
    stage: string;
    status: 'pending' | 'in_progress' | 'complete' | 'error';
    message: string;
    progress?: number;
    sceneId?: string;
    segment?: number;
    totalSegments?: number;
}

// For exporting/importing/saving the whole project state
export interface ExportedProject {
    phase: number;
    initialConcept: InitialConcept | null;
    styleAndFormat: StyleAndFormat | null;
    characters: CharacterDefinition[];
    storyStructure: StoryStructure | null;
    storyPlan: StoryMasterplan | null;
    critique: Critique | null;
    documentation: Documentation | null;
    referenceAssets: ReferenceAssets | null;
    finalAssets: FinalAssets | null;
    // Legacy support for older save format
    plan?: StoryMasterplan;
}
